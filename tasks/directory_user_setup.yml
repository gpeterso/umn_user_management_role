---
# WHY bother creating homedirs and manually copying /etc/skel?
# This would happen automatically on first login but this role
# wants to preinstall ssh keys for users into their homedirs before
# their first login, as a convenience. Therefore their homedirs
# must already exist before first login OR we would need to store
# ssh authorized keys in another location and point sshd at it.
# So a couple of tasks to precreate HOME, populate skel, and install keys
- name: usermanagement - Create home directories for directory users
  ansible.builtin.file:
    path: /home/{{ item.name }}
    state: directory
    owner: '{{ item.name }}'
    group: '{{ item.name }}'
    mode: '0700'
  loop: '{{ umn_user_management_permitted_users }}'
  tags:
    - usermanagement
  register: umn_user_management_homedirs_created

- name: usermanagement - Populate home directories from /etc/skel
  ansible.builtin.copy:
    src: /etc/skel/.
    dest: /home/{{ item.name }}/
    remote_src: true
    owner: '{{ item.name }}'
    group: '{{ item.name }}'
  loop: '{{ umn_user_management_permitted_users }}'
  loop_control:
    index_var: idx
  # Only copy /etc/skel the first time
  when: umn_user_management_homedirs_created.results[idx].changed
  tags:
    - usermanagement

- name: usermanagement - Create sudoers files for directory users and groups
  ansible.builtin.template:
    src: templates/sudoers-ad-entities
    dest: /etc/sudoers.d/ansible-sudoers-ad-{{ item.entitytype }}
    validate: /usr/sbin/visudo -cf %s
    owner: root
    group: root
    mode: '0600'
  loop:
    - entitytype: users
      sudoers_ad_entities: '{{ umn_user_management_permitted_users }}'
    - entitytype: groups
      sudoers_ad_entities: '{{ umn_user_management_permitted_groups }}'
  tags:
    - usermanagement
    - sudoers

- name: usermanagement - Install SSH keys for directory users
  ansible.posix.authorized_key:
    user: '{{ item.name }}'
    key: '{{ item.authorized_keys | default([]) | list | flatten | join("\n") }}'
    state: present
    exclusive: true
    manage_dir: true
  loop: '{{ umn_user_management_permitted_users }}'
  tags:
    - usermanagement
